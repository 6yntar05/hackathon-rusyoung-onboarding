#!/bin/env python3
import sys

import logging

logging.basicConfig(level=logging.INFO)
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
import aiogram.utils.markdown as fmt
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from utils.token import token_get
from database import sqlite_db
import random
from aiogram.contrib.fsm_storage.memory import MemoryStorage


API_TOKEN = token_get()
# dbhost, dbport, dbuser, dbpasswd, dbname
# import database.py

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class UserStateGroup(StatesGroup):
    new_user = State()
    last_name = State()
    first_name = State()
    date = State()
    registrated_user = State()


async def on_startup(_):
    print('–ë–æ—Ç –æ–Ω–ª–∞–π–Ω')
    sqlite_db.sql_start()


# Start Message
@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    await UserStateGroup.new_user.set()
    user_id = message.from_user.id
    if await sqlite_db.is_user_logged_in(user_id):
        await UserStateGroup.registrated_user.set()
        await message.reply('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –ù–∞–ø–∏—à–∏ /restart –¥–ª—è —Ä–∞–±–æ—Ç—ã')
    else:
        await sqlite_db.create_profile(id=message.from_user.id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"]
        keyboard.add(*buttons)
        await UserStateGroup.next()
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã, —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –±–æ—Ç–∞ –†–æ—Å–º–æ–ª–æ–¥–µ–∂–∏, –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å!", reply_markup=keyboard)


@dp.message_handler(state=UserStateGroup.last_name)
async def create_profile(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last_name'] = message.text

    await message.reply('–¢–µ–ø–µ—Ä—å –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç:')
    await UserStateGroup.next()


@dp.message_handler(state=UserStateGroup.first_name)
async def first_name_in_db(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['first_name'] = message.text

    await  message.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:')
    await UserStateGroup.next()


@dp.message_handler(state=UserStateGroup.date)
async def date_in_db(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['daterod'] = message.text
    await sqlite_db.edit_profile(state, id=message.from_user.id)
    await message.reply('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /restart')
    # await state.finish()
    await UserStateGroup.next()
    # await message.answer('State has been set to registrated_user')




@dp.message_handler(text='(^(–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á))')
async def spisok_zadac(message: types.Message, state: FSMContext):
    await message.reply("–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:"
                         "–°—Ö–æ–¥–∏—Ç—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º"
                         "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–ª–µ–∫—Ç–∏–≤–æ–º"
                         "–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ Django")

@dp.message_handler(text='(^(–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π))')
async def spisok_zadac(message: types.Message, state: FSMContext):
        await message.reply("–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π:"
                             "–ü—É—à–∫–∏–Ω SEO: 88005553535"
                             "–ö–∞—Ç—è-—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å back-end: 87452487887")

@dp.message_handler(text='(^(–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è))')
async def spisok_zadac(message: types.Message, state: FSMContext):
    await message.reply("–í—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ: https://youthbit.nya.pub")


@dp.message_handler(state=UserStateGroup.registrated_user)
async def registrated_user(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π", "–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"]
    keyboard.add(*buttons)
    await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!', reply_markup=keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)